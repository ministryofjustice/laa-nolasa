buildscript {
    ext {
        awsXrayRecorderSdk = '2.18.2'
        ojdbc8             = '23.5.0.24.07'
        cloudwatch         = '1.12.13'
        jsonwebtoken       = '0.12.5'
        apacheCxf          = '4.1.2'
        projectlombok      = '1.18.38'
        jaxbApi            = '2.3.1'
        jakartaWsRsApi     = '4.0.0'
        jakartaJwsApi      = '3.0.0'
        jakartaXmlSoapApi  = '3.0.2'
        sunSaajImpl        = '3.0.4'
        aspectjrt          = '1.9.2'
        sentryVersion      = '8.11.1'
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id("com.github.bjornvester.wsdl2java") version "2.0.2"
}

repositories {
    mavenCentral()
    flatDir {
        dirs 'lib'
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.cloud:spring-cloud-starter-aws")
    implementation("org.springframework.boot:spring-boot-starter-data-jdbc")

    implementation("com.amazonaws:aws-xray-recorder-sdk-spring:${awsXrayRecorderSdk}")
    implementation("com.oracle.database.jdbc:ojdbc8:${ojdbc8}")


    implementation("io.micrometer:micrometer-registry-cloudwatch:${cloudwatch}")
    implementation("io.jsonwebtoken:jjwt-api:${jsonwebtoken}")
    implementation("io.jsonwebtoken:jjwt-impl:${jsonwebtoken}")
    implementation("io.jsonwebtoken:jjwt-jackson:${jsonwebtoken}")

    implementation("org.apache.cxf:cxf-spring-boot-starter-jaxws:${apacheCxf}")
    implementation("org.apache.cxf:cxf-rt-features-logging:${apacheCxf}")
    implementation("org.apache.cxf:cxf-rt-wsdl:${apacheCxf}")
    implementation("org.apache.cxf:cxf-rt-wsdl:${apacheCxf}")
    implementation("org.aspectj:aspectjrt:${aspectjrt}")
    annotationProcessor("org.projectlombok:lombok:${projectlombok}")
    implementation("org.projectlombok:lombok:${projectlombok}")

    implementation("jakarta.ws.rs:jakarta.ws.rs-api:${jakartaWsRsApi}")
    implementation("jakarta.jws:jakarta.jws-api:${jakartaJwsApi}")
    implementation("jakarta.xml.soap:jakarta.xml.soap-api:${jakartaXmlSoapApi}")
    implementation("com.sun.xml.messaging.saaj:saaj-impl:${sunSaajImpl}")
    implementation("javax.xml.bind:jaxb-api:${jaxbApi}")

    implementation platform("io.sentry:sentry-bom:$sentryVersion")
    implementation "io.sentry:sentry-spring-boot-starter-jakarta"
    implementation "io.sentry:sentry-logback"


    testImplementation 'org.springframework.boot:spring-boot-starter-test'

}

wsdl2java {
    generatedSourceDir.set(layout.projectDirectory.dir("src/generated/wsdl2java"))
    wsdlDir = file("src/main/resources/wsdl")
}

bootJar {
    archiveBaseName = 'nolasa'
}

test {
    useJUnitPlatform()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Finchley.RELEASE"
    }
}
