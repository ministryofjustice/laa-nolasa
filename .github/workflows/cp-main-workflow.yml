name: deploy

permissions:
  id-token: write
  contents: read

on:
  push:
    branches: [LAWS-3474]

jobs:
  # build-image:
  #   runs-on: ubuntu-latest
  #   # container:
  #   #   image: amazoncorretto:11 # openjdk:11.0-jdk image is DEPRECATED
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
  #         aws-region: ${{ vars.ECR_REGION }}
  #     - uses: aws-actions/amazon-ecr-login@v1
  #       id: login-ecr
  #     - run: |
  #         echo Building the jar file image...
  #         chmod +x ./gradlew && ./gradlew build
  #         echo Building the Docker image...
  #         docker build -f Dockerfile_cp -t $REGISTRY/$REPOSITORY:$IMAGE_TAG --no-cache .
  #         zip -rq buildreports.zip ./build/reports/tests/test/*
  #         docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
  #         echo "{ \"tag\":\"$IMAGE_TAG\" }" >> build_tag.json
  #       env:
  #         REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  #         IMAGE_TAG: ${{ github.sha }}
  deploy-application-dev:
    environment: development
    # needs: build-image
    runs-on: ubuntu-latest
    steps:  
      - uses: actions/checkout@v3    
      - run: |
          echo "${{ secrets.KUBE_CERT }}" > ca.crt
          kubectl config set-cluster ${{ secrets.KUBE_CLUSTER }} --certificate-authority=./ca.crt --server=https://${{ secrets.KUBE_CLUSTER }}
          kubectl config set-credentials cd-serviceaccount --token=${{ secrets.KUBE_TOKEN }}
          kubectl config set-context ${{ secrets.KUBE_CLUSTER }} --cluster=${{ secrets.KUBE_CLUSTER }}--user=cd-serviceaccount --namespace=${{ secrets.KUBE_NAMESPACE }}
          kubectl config use-context ${{ secrets.KUBE_CLUSTER }}
          kubectl get pods -n ${{ secrets.KUBE_NAMESPACE }}
      - run: |
          cd helm_deploy/not-on-libra-auto-search-application
          helm upgrade not-on-libra-auto-search-application -f values_dev.yaml . --namespace ${{ secrets.KUBE_NAMESPACE }} --install --set nolasa.image.tag=${{ github.sha }}
  deploy-application-test:
    environment: test
    needs: deploy-application-dev
    runs-on: ubuntu-latest
    steps:  
      - uses: actions/checkout@v3    
      - run: |
          echo "${{ secrets.KUBE_CERT }}" > ca.crt
          kubectl config set-cluster ${{ secrets.KUBE_CLUSTER }} --certificate-authority=./ca.crt --server=https://${{ secrets.KUBE_CLUSTER }}
          kubectl config set-credentials cd-serviceaccount --token=${{ secrets.KUBE_TOKEN }}
          kubectl config set-context ${{ secrets.KUBE_CLUSTER }} --cluster=${{ secrets.KUBE_CLUSTER }}--user=cd-serviceaccount --namespace=${{ secrets.KUBE_NAMESPACE }}
          kubectl config use-context ${{ secrets.KUBE_CLUSTER }}
      - run: |
          cd helm_deploy/not-on-libra-auto-search-application
          helm upgrade not-on-libra-auto-search-application -f values_tst.yaml . --namespace ${{ secrets.KUBE_NAMESPACE }} --install --set nolasa.image.tag=${{ github.sha }}
  deploy-application-preprod:
    environment: preproduction
    needs: deploy-application-test
    runs-on: ubuntu-latest
    steps:  
      - uses: actions/checkout@v3    
      - run: |
          echo "${{ secrets.KUBE_CERT }}" > ca.crt
          kubectl config set-cluster ${{ secrets.KUBE_CLUSTER }} --certificate-authority=./ca.crt --server=https://${{ secrets.KUBE_CLUSTER }}
          kubectl config set-credentials cd-serviceaccount --token=${{ secrets.KUBE_TOKEN }}
          kubectl config set-context ${{ secrets.KUBE_CLUSTER }} --cluster=${{ secrets.KUBE_CLUSTER }}--user=cd-serviceaccount --namespace=${{ secrets.KUBE_NAMESPACE }}
          kubectl config use-context ${{ secrets.KUBE_CLUSTER }}
      - run: |
          cd helm_deploy/not-on-libra-auto-search-application
          helm upgrade not-on-libra-auto-search-application -f values_preprod.yaml . --namespace ${{ secrets.KUBE_NAMESPACE }} --install --set nolasa.image.tag=${{ github.sha }}
  deploy-application-prod:
    environment: production
    needs: deploy-application-preprod
    runs-on: ubuntu-latest
    steps:  
      - uses: actions/checkout@v3    
      - run: |
          echo "${{ secrets.KUBE_CERT }}" > ca.crt
          kubectl config set-cluster ${{ secrets.KUBE_CLUSTER }} --certificate-authority=./ca.crt --server=https://${{ secrets.KUBE_CLUSTER }}
          kubectl config set-credentials cd-serviceaccount --token=${{ secrets.KUBE_TOKEN }}
          kubectl config set-context ${{ secrets.KUBE_CLUSTER }} --cluster=${{ secrets.KUBE_CLUSTER }}--user=cd-serviceaccount --namespace=${{ secrets.KUBE_NAMESPACE }}
          kubectl config use-context ${{ secrets.KUBE_CLUSTER }}
      - run: |
          cd helm_deploy/not-on-libra-auto-search-application
          helm upgrade not-on-libra-auto-search-application -f values_prd.yaml . --namespace ${{ secrets.KUBE_NAMESPACE }} --install --set nolasa.image.tag=${{ github.sha }}