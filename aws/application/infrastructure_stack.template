---
AWSTemplateFormatVersion: '2010-09-09'
Description: LAA infrastructure stack foundation based on UK OFFICIAL infrastructure template
Parameters:
  pAppName:
    Type: String
    Default: ''
    Description: Application name with application instance identifier,
      e.g. "CCR1" to accommodate multiple instances of the same stack under the same infrastructure
  pEcsAmiId:
    Type: String
    Default: ''
    Description: AMI image to use
  pEc2InstanceType:
    Type: String
    Default: ''
    Description: Instance size for EC2 instances hosting ECS
  pSshKeyName:
    Type: String
    Default: ''
    Description: The EC2 instances SSH key

Resources:

################################################################################
#
# Security groups
#
################################################################################

  AppEcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: NOLASA App ECS Security Group
      VpcId: !ImportValue "env-VpcId"
      Tags:
        - Key: Name
          Value: 'NOLASA App ECS Security Group'
  EcsSecurityGroupSSHBastion:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref AppEcsSecurityGroup
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: !ImportValue env-BastionSSHCIDR
  EcsSecurityGroupSSHVPC:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:    
      GroupId: !Ref AppEcsSecurityGroup
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: !ImportValue env-VpcCidr

################################################################################
#
# ECS Infastructure
#
################################################################################

  AppEc2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
      - PolicyName: app-ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'ecs:CreateCluster'
              - 'ecs:DeregisterContainerInstance'
              - 'ecs:DiscoverPollEndpoint'
              - 'ecs:Poll'
              - 'ecs:RegisterContainerInstance'
              - 'ecs:StartTelemetrySession'
              - 'ecs:Submit*'
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'ecr:*'
              - 'cloudwatch:PutMetricData'
            Resource: '*'

  CloudwatchLogsGroupEC2:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '${pAppName}-EC2'
      RetentionInDays: 90

  CloudwatchLogsEC2KeyAssociation:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !ImportValue security-LogGroupLambdaArn
      KeyArn: !ImportValue "security-LogGroupKeyArn"
      LogGroupName: !Ref CloudwatchLogsGroupEC2

  AppEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ !Ref AppEc2Role ]

  AppEcsCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Ref pAppName

  AppEc2LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref pEcsAmiId
      SecurityGroups: [ !Ref AppEcsSecurityGroup ]
      InstanceType: !Ref pEc2InstanceType
      IamInstanceProfile: !Ref AppEC2InstanceProfile
      KeyName: !Ref pSshKeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${AppEcsCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap awslogs
          cat >/etc/awslogs/awslogs.conf <<-EOF
          [general]
          state_file = /var/lib/awslogs/agent-state

          [/var/log/secure]
          datetime_format = %b %d %H:%M:%S
          file = /var/log/secure
          buffer_duration = 5000
          log_stream_name = secure/{instance_id}
          initial_position = start_of_file
          log_group_name = ${pAppName}-EC2

          [/var/log/messages]
          datetime_format = %b %d %H:%M:%S
          file = /var/log/messages
          buffer_duration = 5000
          log_stream_name = messages/{instance_id}
          initial_position = start_of_file
          log_group_name = ${pAppName}-EC2
          EOF
          chmod 644 /etc/awslogs/awslogs.conf
          # Change region
          sed -i 's/^region = .*/region = eu-west-2/g' /etc/awslogs/awscli.conf
          chkconfig awslogs on
          service awslogs restart
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}

  AppECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: True
    Properties:
      DesiredCapacity: 2
      LaunchConfigurationName: !Ref AppEc2LaunchConfig
      MaxSize: 2
      MinSize: 1
      VPCZoneIdentifier:
        - !ImportValue 'env-AppPrivateSubnetA'
        - !ImportValue 'env-AppPrivateSubnetB'
        - !ImportValue 'env-AppPrivateSubnetC'
      Tags:
        - Key: Keep
          Value: 'true'
          PropagateAtLaunch: true
        - Key: Name
          Value: 'laa-NOLASA-ECS'
          PropagateAtLaunch: true

Outputs:
  AppEcsCluster:
    Description: The ECS cluster created by the stack
    Value: !Ref AppEcsCluster

  AppECSAutoScalingGroup:
    Description: ECS AutoScaling Group name
    Value: !Ref AppECSAutoScalingGroup